#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharRenderingComponent

#include "Basic.hpp"

#include "ECharacterRenderingType_structs.hpp"
#include "ECharacterSlotSpecifiedType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ECharacterControllerCaseType_structs.hpp"
#include "ECharacterDitherType_structs.hpp"
#include "ECharacterBodySpecifiedType_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass CharRenderingComponent.CharRenderingComponent_C
// 0x0018 (0x00D8 - 0x00C0)
class UCharRenderingComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPDA_InteractionPlayerConfig_C*         InteractionConfig;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPDA_DecalShadowConfig_C*               DecalShadowConfig;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CharRenderingComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Init(ECharacterRenderingType RenderType);
	void RemoveMaterialControllerData(int32 Handle1);
	int32 AddMaterialControllerData(class UObject* Data);
	void ResetAllRenderingState();
	void RemoveMaterialControllerDataWithEnding(int32 Handle);
	int32 AddMaterialControllerDataGroup(class UObject* Data);
	void RemoveMaterialControllerDataGroup(int32 Handle);
	bool CheckInit();
	void SetDebug(bool Value);
	class UPD_MaterialDebug_C* GetDebugInfo();
	void AddComponent(const class FString& SkelName, class UMeshComponent* SkeletalComp);
	void RemoveComponent(const class FString& SkelName);
	void OnFinalizedLevelSequence();
	void SetMaterialPropertyFloat(ECharacterBodySpecifiedType bodyType, float SectionIndex, ECharacterSlotSpecifiedType SlotType, const class FString& PropertyName, float Value);
	void SetMaterialPropertyColor(ECharacterBodySpecifiedType bodyType, float SectionIndex, ECharacterSlotSpecifiedType SlotType, const class FString& PropertyName, const struct FLinearColor& Value);
	void SetCapsuleDither(float Value);
	void SetDitherEffect(float DitherRate, ECharacterDitherType DitherType);
	void RemoveMaterialControllerDataGroupWithEnding(int32 Handle);
	float QuickInitAndAddDataGroup(class UObject* Data, class ASkeletalMeshActor* MeshActor);
	void AddComponentByCase(ECharacterControllerCaseType CaseType, class UMeshComponent* SkeletalComp);
	float QuickInitAndAddDataWithMeshComponent(class UObject* Data, class UMeshComponent* MeshComponent);
	bool GetInWater(float DepthThreshold);
	void SetEffectProgress(float Progress, int32 HandleId);
	void RemoveComponentByCase(ECharacterControllerCaseType CaseType);
	void SetBodyEffectOpacity(float Opacity);
	float QuickInitAndAddDataGroupWithMeshComponent(class UObject* Data, class UMeshComponent* MeshComponent);
	void SetDecalShadowEnabled(bool Enable);
	void DisableAllShadowByDecalShadowComponent();
	void AddComponentForDecalShadow(const class FString& Param_Name, class UPrimitiveComponent* Comp);
	void RemoveComponentFromDecalShadow(const class FString& Param_Name);
	void ReceiveSeqTick(float DeltaSeconds);
	void SetLogicOwner(class AActor* Owner);
	float GetTimeDilation();
	void SetRealtimeShadowEnabled(bool Enable);
	void SetDecalShadowOpacity(float Opacity);
	void SetRealtimeShadowOpacity(float Opacity);
	void Destroy();
	void SetDisableFightDither(bool Disable);
	void AddComponentInnerV2(const class FString& SkelName1, class UMeshComponent* SkeletalComp1, bool UseEmptyMaterial);
	void RemoveComponentInnerV2(const class FString& SkelName);
	void SetEffectPause(int32 Handle, bool Paused);
	float QuickInitAndAddData(class UObject* Data, class ASkeletalMeshActor* MeshActor);
	class USkeletalMeshComponent* GetSkeletalMeshComponent(const class FString& SkelName);
	void AddComponentWithEmptyMaterial(const class FString& SkelName, class UMeshComponent* SkeletalComp);
	void SetStarScarEnergy(float Value);
	float AddMaterialControllerDataWithAnimObject(class UObject* Data1, class USkeletalMeshComponent* AnimObject, class UObject* UserData);
	float AddMaterialControllerDataGroupWithAnimObject(class UObject* Data1, class USkeletalMeshComponent* AnimObject);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharRenderingComponent_C">();
	}
	static class UCharRenderingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharRenderingComponent_C>();
	}
};
static_assert(alignof(UCharRenderingComponent_C) == 0x000008, "Wrong alignment on UCharRenderingComponent_C");
static_assert(sizeof(UCharRenderingComponent_C) == 0x0000D8, "Wrong size on UCharRenderingComponent_C");
static_assert(offsetof(UCharRenderingComponent_C, UberGraphFrame) == 0x0000C0, "Member 'UCharRenderingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCharRenderingComponent_C, InteractionConfig) == 0x0000C8, "Member 'UCharRenderingComponent_C::InteractionConfig' has a wrong offset!");
static_assert(offsetof(UCharRenderingComponent_C, DecalShadowConfig) == 0x0000D0, "Member 'UCharRenderingComponent_C::DecalShadowConfig' has a wrong offset!");

}

