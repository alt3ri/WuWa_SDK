#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroMasterSeqEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroMasterSeqEvent.BP_KuroMasterSeqEvent_C
// 0x0030 (0x02E0 - 0x02B0)
class ABP_KuroMasterSeqEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ModifiedNearClipPlane;                             // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnScreenShotFade;                                  // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DelayMerge;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnScreenShotFade__DelegateSignature();
	void ExecuteUbergraph_BP_KuroMasterSeqEvent(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void ______();
	void ______1();
	void ______0(bool ShouldBlend, float blendTime, EViewTargetBlendFunction blendFunction, float blendExp);
	void O____();
	void _t_4_j__(int32 NearClip);
	void b__4_j__();
	void _s_i__(bool Enable);
	void GLA_L_(const class FString& Key);
	void _____0();
	void ____();
	void S_____(int32 ChapterState, int32 ChapterId);
	void U_8_Logo(float Time);
	void _____(const class FString& MaleAssetPath, const class FString& FemaleAssetPath, const class FString& MaleSpineName, const class FString& FemaleSpineName, bool NeedLoop);
	void ______p__(const class FString& MaleAssetPath, const class FString& FemaleAssetPath, TArray<struct FSpineThingsInfo>& MaleSpineArray, TArray<struct FSpineThingsInfo>& FemaleSpineArray);
	void S____();
	void _______(const class FString& SeqName);
	void GL_S___(const class FString& Key, int32 EntityId);
	void __Spine__(const class FString& SpineName, bool NeedLoop);
	void __Spine____Plus_(const class FString& MaleSpineName1, const class FString& FemaleSpineName1, bool NeedLoop);
	void __Spine___p__(TArray<struct FSpineThingsInfo>& MaleSpineArray, TArray<struct FSpineThingsInfo>& FemaleSpineArray);
	void S_Spine__(const class FString& SpineName);
	void S_Spine___p__(TArray<class FString>& SpineArray);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroMasterSeqEvent_C">();
	}
	static class ABP_KuroMasterSeqEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroMasterSeqEvent_C>();
	}
};
static_assert(alignof(ABP_KuroMasterSeqEvent_C) == 0x000008, "Wrong alignment on ABP_KuroMasterSeqEvent_C");
static_assert(sizeof(ABP_KuroMasterSeqEvent_C) == 0x0002E0, "Wrong size on ABP_KuroMasterSeqEvent_C");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_KuroMasterSeqEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_KuroMasterSeqEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, ModifiedNearClipPlane) == 0x0002C0, "Member 'ABP_KuroMasterSeqEvent_C::ModifiedNearClipPlane' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, OnScreenShotFade) == 0x0002C8, "Member 'ABP_KuroMasterSeqEvent_C::OnScreenShotFade' has a wrong offset!");
static_assert(offsetof(ABP_KuroMasterSeqEvent_C, DelayMerge) == 0x0002D8, "Member 'ABP_KuroMasterSeqEvent_C::DelayMerge' has a wrong offset!");

}

