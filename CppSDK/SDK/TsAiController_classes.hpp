#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TsAiController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "KuroGameplay_classes.hpp"
#include "ECharacterState_structs.hpp"


namespace SDK
{

// TypeScriptGeneratedClass TsAiController.TsAiController_C
// 0x0018 (0x03D8 - 0x03C0)
class ATsAiController_C : public AKuroAIController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroStateMachineGroup*                 StateMachineGroup;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TsAiController(int32 EntryPoint);
	void ReceiveDestroyed();
	void ActivateSkillGroup(int32 SkillGroupIndex, bool Activate);
	void AddSkillCd(int32 SkillInfoId, float CdAdd);
	void SetBattleWanderTime(float Min, float Max);
	void AddComplicatedEventBinder(const struct FSAiConditions& Conditions, class UKuroBooleanEventBinder* EventBinder);
	void OnStart();
	class FText GetDebugText();
	void ChangeHatred(int32 EntityId, float Rate, float Abs);
	void ClearHatred(int32 EntityId);
	void SetBattleWanderIndex(int32 Param_Index);
	void AddBattleWanderEndTime(float AddTime);
	void TestChangeAi(const class FString& Id);
	void AicApplyBuff(int64 buffId);
	void AicRemoveBuff(int64 buffId);
	void AicAddTag(const struct FGameplayTag& Tag);
	void AicRemoveTag(const struct FGameplayTag& Tag);
	void SetAiEnable(bool Enable, const class FString& Key);
	void LogReport(int32 LogId);
	void SetAiSenseEnable(int32 Param_Index, bool Enable);
	void AddOrRemoveAiSense(int32 AiSenseId, bool Add);
	void EnableAiSenseByType(int32 Type, bool Enable);
	void AddHateEventBinder(class UKuroPerceptionEventBinder* Handler1);
	void AddPerceptionEventBinder(class UKuroPerceptionEventBinder* Handler);
	void AddHateOutRangeEventBinder(class UKuroPerceptionEventBinder* Handler);
	void SetPerceptionEventState(bool IncludeFriend, bool IncludeEnemy, bool IncludeNeutral);
	void AddSceneItemDestroyEventBinder(float Distance, class UKuroActorEventBinder* EventBinder);
	void SetAiHateConfig(const class FString& ConfigId);
	void AddAlertEventBinder(class UKuroBooleanEventBinder* EventBinder);
	void SetAiAlertConfig(const class FString& ConfigId);
	bool GetCoolDownDone(int32 Id);
	float GetCoolDownRemainTime(int32 Id);
	void SetCoolDown(int32 Id, float Cd);
	void InitCooldownEvent(int32 Id, class UKuroBooleanEventBinder* EventBinder);
	void StartCooldownTimer(int32 Id, float Duration);
	bool _____0();
	bool ____();
	void ___6C_();
	void ___b_(ECharacterState OldState, ECharacterState NewState, bool Param_IsAutonomousProxy);
	bool _______(TArray<class FString>& States);
	void _b_____(TArray<class FString>& States);
	void GetDebugStateMachine(TArray<class FText>& Output);
	void AicApplyBuffToTarget(int32 TargetId, int64 buffId);
	void AddLevelVarBoolEventBinder(const struct FSAiLevelVar& LevelVar, class UKuroBooleanEventBinder* EventBinder);
	void AddLevelVarIntEventBinder(const struct FSAiLevelVar& LevelVar, class UKuroIntEventBinder* EventBinder);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TsAiController_C">();
	}
	static class ATsAiController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATsAiController_C>();
	}
};
static_assert(alignof(ATsAiController_C) == 0x000008, "Wrong alignment on ATsAiController_C");
static_assert(sizeof(ATsAiController_C) == 0x0003D8, "Wrong size on ATsAiController_C");
static_assert(offsetof(ATsAiController_C, UberGraphFrame) == 0x0003C0, "Member 'ATsAiController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATsAiController_C, BehaviorTree) == 0x0003C8, "Member 'ATsAiController_C::BehaviorTree' has a wrong offset!");
static_assert(offsetof(ATsAiController_C, StateMachineGroup) == 0x0003D0, "Member 'ATsAiController_C::StateMachineGroup' has a wrong offset!");

}

