#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LoginAudioVisualizationController

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LoginAudioVisualizationController.BP_LoginAudioVisualizationController_C
// 0x0048 (0x02F8 - 0x02B0)
class ABP_LoginAudioVisualizationController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody1;                                           // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody2;                                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody1BurstThreshold;                             // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody2BurstThreshold;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody1BurstSize;                                  // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody2BurstSize_;                                 // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoginTrackAttSpeed;                                // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoginTrackScale;                                   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoginTrackSize;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody1Prev;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Melody2Prev;                                       // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Melody1Burst;                                      // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Melody2Burst;                                      // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoginTrackAccum;                                   // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LoginAudioVisualizationController(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LoginAudioVisualizationController_C">();
	}
	static class ABP_LoginAudioVisualizationController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LoginAudioVisualizationController_C>();
	}
};
static_assert(alignof(ABP_LoginAudioVisualizationController_C) == 0x000008, "Wrong alignment on ABP_LoginAudioVisualizationController_C");
static_assert(sizeof(ABP_LoginAudioVisualizationController_C) == 0x0002F8, "Wrong size on ABP_LoginAudioVisualizationController_C");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_LoginAudioVisualizationController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_LoginAudioVisualizationController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Delta) == 0x0002C0, "Member 'ABP_LoginAudioVisualizationController_C::Delta' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody1) == 0x0002C4, "Member 'ABP_LoginAudioVisualizationController_C::Melody1' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody2) == 0x0002C8, "Member 'ABP_LoginAudioVisualizationController_C::Melody2' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody1BurstThreshold) == 0x0002CC, "Member 'ABP_LoginAudioVisualizationController_C::Melody1BurstThreshold' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody2BurstThreshold) == 0x0002D0, "Member 'ABP_LoginAudioVisualizationController_C::Melody2BurstThreshold' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody1BurstSize) == 0x0002D4, "Member 'ABP_LoginAudioVisualizationController_C::Melody1BurstSize' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody2BurstSize_) == 0x0002D8, "Member 'ABP_LoginAudioVisualizationController_C::Melody2BurstSize_' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, LoginTrackAttSpeed) == 0x0002DC, "Member 'ABP_LoginAudioVisualizationController_C::LoginTrackAttSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, LoginTrackScale) == 0x0002E0, "Member 'ABP_LoginAudioVisualizationController_C::LoginTrackScale' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, LoginTrackSize) == 0x0002E4, "Member 'ABP_LoginAudioVisualizationController_C::LoginTrackSize' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody1Prev) == 0x0002E8, "Member 'ABP_LoginAudioVisualizationController_C::Melody1Prev' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody2Prev) == 0x0002EC, "Member 'ABP_LoginAudioVisualizationController_C::Melody2Prev' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody1Burst) == 0x0002F0, "Member 'ABP_LoginAudioVisualizationController_C::Melody1Burst' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, Melody2Burst) == 0x0002F1, "Member 'ABP_LoginAudioVisualizationController_C::Melody2Burst' has a wrong offset!");
static_assert(offsetof(ABP_LoginAudioVisualizationController_C, LoginTrackAccum) == 0x0002F4, "Member 'ABP_LoginAudioVisualizationController_C::LoginTrackAccum' has a wrong offset!");

}

